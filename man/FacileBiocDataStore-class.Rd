% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R, R/bioc-DESeqDataSet.R, R/bioc-DGEList.R
\docType{class}
\name{FacileBiocDataStore-class}
\alias{FacileBiocDataStore-class}
\alias{facilitate}
\alias{FacileBiocDataStore}
\alias{facilitate.DESeqDataSet}
\alias{facilitate.DGEList}
\title{Immerse bioconductor assay containers into the facile.bio ecosystem.}
\usage{
\method{facilitate}{DESeqDataSet}(
  x,
  assay_type = "rnaseq",
  feature_type = "infer",
  organism = "unknown",
  ...,
  run_vst = NULL,
  blind = TRUE,
  nsub = 1000,
  fitType = "parametric",
  verbose = FALSE
)

\method{facilitate}{DGEList}(
  x,
  assay_type = "rnaseq",
  feature_type = "infer",
  organism = "unknown",
  ...
)
}
\arguments{
\item{assay_type}{A string that indicates the type of assay stored in the
primary assay of the container. For some assay containers, like
\code{DESeqDataSet}, \code{DGEList}, and \code{SingleCellExperiment}, we can assume the
default value for this to be \code{"rnaseq"}. For the rest, we assume it's
\code{"lognorm"}.}

\item{feature_type}{A string that indicates the type of features identifiers
the assay containers is using. Default is \code{"infer"} to try to guess, but
this is not the most accurate.}

\item{organism}{the organism the dataset is for (Homo sapiens, Mus musculus,
etc.)}

\item{run_vst}{should we re-run the vst transformation for a DESeqDataSet.
If the \code{DESeqDataSet} already has a \code{"vst"} assay, then we'll just take
that, otherwise if this isn't set to \code{FALSE} it will be run.}

\item{blind, nsub, fitType}{parameters to send to \code{\link[DESeq2:vst]{DESeq2::vst()}} to tweak
how it is run internally}

\item{verbose}{make some noise}
}
\description{
Bioconductor assay containers, like a DGEList, DESeqDataSet,
SummarizedExperiment, etc. can be used within the facie.bio ecosystem by
invoking the \code{facilitate()} method on them. This will return a \verb{Facile*}
subclass of the container itself.
}
\details{
For instance, \code{facilitate(DGEList)} will return a \code{FacileDGEList}, which can
be used a "normal" DGEList in all the same ways, but is also wrapped with
the facile api api and can be used by methods withing the \code{FacileAnalysis},
for instance.

These classes are also all subclass of the abstract \code{FacileBiocDataStore}
virtual class.
}
\section{DESeqDataSet}{


The FacileDESeqDataSet will look for variance stabilized versions of the
data in the \code{"vst"} and \code{"rlog"} assay matrices. If no \code{"vst"} assay is
present, it will be run and stored there, unless the \verb{facilitate,run_vst}
parameter is set to \code{FALSE}.

Because DESeq uses a different normalization method than edgeR's TMM, when
the user calls \code{fetch_assay_data(.., normalized = TRUE)}, the default will
be to return the normalized count data retrieved from
\code{\link[DESeq2:counts]{DESeq2::counts()}} with \code{normalized = TRUE}.

To return \code{\link[edgeR:cpm]{edgeR::cpm()}} values, you can set \code{normalized = "cpm"}, but this
must be working over the \code{"counts"} assay.
\enumerate{
\item Add parameters to run vst/rlog?
\item Enable vst, rlog, and normcounts  to be retrieved via
fetch_assay_data(assay_name = {"vst"|"rlog"|"normcounts"})
}
}

\section{DGEList}{

We assume the DGEList holds \code{"rnaseq"} assay data. Set the \code{assay_type}
parameter if that's not the case.
}

\examples{
# DESeq2 --------------------------------------------------------------------
dds <- DESeq2::makeExampleDESeqDataSet(n=2000, m=20)
fd <- facilitate(dds)
fetch_assay_data(samples(fd), c("gene1", "gene20"))
fetch_assay_data(samples(fd), c("gene1", "gene20"), normalized = TRUE)
fetch_assay_data(samples(fd), c("gene1", "gene20"), normalized = "cpm")

samples(fd) \%>\%
  with_assay_data(c("gene1", "gene20"), normalized = TRUE)

# Retrieiving different flavors of normalized expression data
dat <- samples(fd) \%>\%
  with_assay_data("gene1", normalized = TRUE) \%>\%
  with_assay_data("gene1", normalized = "cpm") \%>\%
  with_assay_data("gene1", assay_name = "vst") \%>\%
  select(-(1:2))
colnames(dat) <- c("normcounts", "cpm", "vst")
pairs(dat)

dpca <- FacileAnalysis::fpca(fd, assay_name = "vst")
# edgeR ---------------------------------------------------------------------
y <- example_bioc_data(class = "DGEList")
yf <- facilitate(y)
FacileAnalysis::fpca(yf)
}
